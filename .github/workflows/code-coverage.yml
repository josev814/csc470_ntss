# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: NTSS Code Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Update pip
      run: |
        python -m pip install --upgrade pip
    - name: Install pytest and coverage
      run: |
        python -m pip install flake8 pytest pytest-cov coverage
    - name: Install pip requirements
      run: |
          python -m pip install -r requirements.txt
    - name: Lint with flake8 check for syntax errors or undefined vars
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --exclude=ntss_app --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Lint with flake8
      run: |
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --exclude=ntss_app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Setup Env Vars
      run: |
        cat >> Build/.appenvvars << EOF
          MYSQL_HOST=ntss_database
          MYSQL_DATABASE=ntss
          MYSQL_USER=unittestUser
          MYSQL_PASSWORD=unittestUserPasword
          MYSQL_PWD=unittestUserPasword
        EOF
        cat >> Build/.dbenvvars << EOF
          MYSQL_ROOT_PASSWORD=unittestRootPassword
          MYSQL_DATABASE=ntss
          MYSQL_USER=unittestUser
          MYSQL_PASSWORD=unittestUserPasword
          MYSQL_PWD=unittestUserPasword
        EOF
    - name: Compose docker
      run: |
        docker compose -f Build/docker-compose.yml up -d --build --remove-orphans
    - name: Test with coverage
      run: |
        docker exec -it ntss_app /bin/bash -c 'source ntss_app/bin/activate; cd ntss_www; coverage run -m pytest --disable-warnings -v ../'
    - name: Output results
      run: |
        docker exec -it ntss_app /bin/bash -c 'source ntss_app/bin/activate; cd ntss_www; coverage report -m'
