ARG OS_NAME=debian
ARG OS_VERSION=bookworm
FROM ${OS_NAME}:${OS_VERSION} as osinstall

SHELL [ "/bin/bash", "-c" ]
ENV TERM=xterm
ENV SHELL=bash
ENV DEBIAN_FRONTEND=noninteractive

 RUN echo '#!/bin/sh' > /usr/sbin/policy-rc.d \
    && echo 'exit 101' >> /usr/sbin/policy-rc.d \
    && chmod +x /usr/sbin/policy-rc.d \
    && dpkg-divert --local --rename --add /sbin/initctl \
    && cp -a /usr/sbin/policy-rc.d /sbin/initctl \
    && sed -i 's/^exit.*/exit 0/' /sbin/initctl

RUN echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup \
    && echo 'DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' > /etc/apt/apt.conf.d/docker-clean \
    && echo 'APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' >> /etc/apt/apt.conf.d/docker-clean \
    && echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";' >> /etc/apt/apt.conf.d/docker-clean \
    && echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/docker-no-languages \
    && echo 'Acquire::GzipIndexes "true"; Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/docker-gzip-indexes \
    && echo 'Apt::AutoRemove::SuggestsImportant "false";' > /etc/apt/apt.conf.d/docker-autoremove-suggests \
    && echo 'APT::Keep-Downloaded-Packages "false";' > /etc/apt/apt.conf.d/docker-disable-cache \
    && echo 'APT::Clean-Installed "true";' > /etc/apt/apt.conf.d/docker-clean-installed \
    && echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf.d/90assumeyes \
    && apt-config dump | grep -we Recommends -e Suggests | sed s/1/0/ | tee /etc/apt/apt.conf.d/999norecommend
    
RUN apt-get update \
    && apt-get install default-mysql-client apache2 default-libmysqlclient-dev build-essential supervisor

FROM osinstall as pythoninstall
WORKDIR /tmp

ARG PYTHON_MAJOR_VERSION=3
ARG PYTHON_MINOR_VERSION=11
ARG PYTHON_PATCH_VERSION=2
ARG PYTHON_VERSION="${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION}.${PYTHON_PATCH_VERSION}"
ARG PIP_BASE_CMD="python${PYTHON_MAJOR_VERSION} -m pip"

RUN apt-get update \
    && apt-cache policy python${PYTHON_MAJOR_VERSION} | grep -i candidate | awk '{split($2, v, "-"); print v[1]; }' > /apt_pyversion.txt \
    && apt_pyversion=$(cat /apt_pyversion.txt) \
    && if [[ "${apt_pyversion}" =~ ${PYTHON_VERSION} ]]; then \
        apt-get install python3-dev python3-minimal python3-pip python3-venv \
    ; else \
        apt-get install wget ca-certificates build-essential checkinstall libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev \
        && wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \
        && tar -xzf Python-${PYTHON_VERSION}.tgz \
        && rm Python-${PYTHON_VERSION}.tgz \
        && cd Python-${PYTHON_VERSION} \
        && ./configure --enable-optimizations --disable-ipv6 --disable-test-modules --with-ensurepip=install --without-doc-strings \
        && make altinstall \
        && rm -rf Python-${PYTHON_VERSION} \
    ; fi

# Replace default python version
RUN apt_pyversion=$(cat /apt_pyversion.txt) \
    && if ! [[ "${apt_pyversion}" =~ ${PYTHON_VERSION} ]]; then \
        rm -f /usr/bin/python${PYTHON_MAJOR_VERSION} /usr/bin/pip${PYTHON_MAJOR_VERSION} \
        && ln -s /usr/local/bin/python${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION} /usr/bin/python${PYTHON_MAJOR_VERSION} \
        && ln -s /usr/local/bin/pip${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION} /usr/bin/pip${PYTHON_MAJOR_VERSION} \
    ; fi

WORKDIR /app
COPY requirements.txt ./

RUN pip_cmd="${PIP_BASE_CMD} install -r requirements.txt --no-cache-dir" \
    && apt_pyversion=$(cat /apt_pyversion.txt) \
    && rm /apt_pyversion.txt \
    && if [[ "${apt_pyversion}" =~ ${PYTHON_VERSION} ]]; then \
        apt-get update && apt-get install lsb-release \
        && os_num=$(lsb_release -sr) \
        && os_name=$(lsb_release -si) \
        && apt-get remove --purge lsb-release \
        && if [[ "${os_name}" == 'Debian' ]] && [[ ${os_num} -gt 11 ]]; then \
            pip_cmd+=" --break-system-packages" \
        ; fi \
    ; else \
        python${PYTHON_MAJOR_VERSION} -m ensurepip --default-pip \
        && ${PIP_BASE_CMD[@]} install -U pip setuptools wheel \
    ; fi \
    && ${pip_cmd[@]} \
    && rm -f requirements.txt

FROM pythoninstall as app
LABEL project="NTSS" \
    university="Fayetteville State University"
WORKDIR /app

COPY ./Build/apache2/conf-available/* /etc/apache2/conf-available/
COPY ./Build/apache2/sites-available/* /etc/apache2/sites-available/
COPY ./Build/apache2/mods-available/* /etc/apache2/mods-available/

RUN apt-get update \
    && apt-get install libapache2-mod-wsgi-py3 \
    && rm /var/log/apache2/access.log /var/log/apache2/error.log \
    && ln -s /dev/stdout /var/log/apache2/access.log \
    && ln -s /dev/stderr /var/log/apache2/error.log \
    # && a2enconf cgi.conf \
    && a2enmod wsgi \
    && a2dismod -f dir \
    # && a2enmod cgi dir \
    && a2enmod wsgi

COPY ./Build/supervisor.conf /etc/supervisor/conf.d/supervisord.conf

# fixing any windows crlf perms
RUN apt-get update \
    && apt-get install -y dos2unix \
    && find /app -type f -print0 | xargs -0 dos2unix -- \
    && apt-get remove --purge -y dos2unix


RUN apt-get update \
    && apt-get install -y vim

EXPOSE 80
CMD [ "/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf" ]